version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.178.93:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_MS: 1800000 # 30 minutes

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081


  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.3
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092

  postgres:
    image: postgres:17.4
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  consumer_ride_requested:
    build:
      context: .
      dockerfile: consumers/Dockerfile
    command: [ "python", "-m", "modules.consumers.consumer_ride_requested" ]
    depends_on:
      - kafka
      - schema-registry
      - postgres
    env_file:
      - .env
    restart: unless-stopped

  consumer_ride_started:
    build:
      context: .
      dockerfile: consumers/Dockerfile
    command: [ "python", "-m", "modules.consumers.consumer_ride_started" ]
    depends_on:
      - kafka
      - schema-registry
      - postgres
    env_file:
      - .env
    restart: unless-stopped

  consumer_ride_completed:
    build:
      context: .
      dockerfile: consumers/Dockerfile
    command: [ "python", "-m", "modules.consumers.consumer_ride_completed" ]
    depends_on:
      - kafka
      - schema-registry
      - postgres
    env_file:
      - .env
    restart: unless-stopped

  consumer_location_update:
    build:
      context: .
      dockerfile: consumers/Dockerfile
    command: [ "python", "-m", "modules.consumers.consumer_location_update" ]
    depends_on:
      - kafka
      - schema-registry
      - postgres
    env_file:
      - .env
    restart: unless-stopped

  consumer_dlq:
    build:
      context: .
      dockerfile: consumers/Dockerfile
    command: [ "python", "-m", "modules.consumers.consumer_dlq" ]
    depends_on:
      - kafka
      - schema-registry
      - postgres
    env_file:
      - .env
    restart: unless-stopped


volumes:
  pgdata:
