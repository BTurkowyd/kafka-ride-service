---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-headless
  namespace: uber-service
spec:
  clusterIP: None
  selector:
    app: zookeeper
  ports:
    - port: 2181
      name: client
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: uber-service
spec:
  serviceName: zookeeper-headless
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:7.5.3
          ports:
            - containerPort: 2181
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
          volumeMounts:
            - name: zookeeper-data
              mountPath: /var/lib/zookeeper/data
  volumeClaimTemplates:
    - metadata:
        name: zookeeper-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: uber-service
spec:
  clusterIP: None
  selector:
    app: kafka
  ports:
    - port: 9092
      name: kafka
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: uber-service
spec:
  type: ClusterIP
  selector:
    app: kafka
  ports:
    - port: 9092
      targetPort: 9092
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-external
  namespace: uber-service
spec:
  type: LoadBalancer
  selector:
    app: kafka
  ports:
    - port: 9094
      targetPort: 9092

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: uber-service
spec:
  serviceName: kafka-headless
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      securityContext:
        fsGroup: 1001  # Bitnami Kafka runs as uid 1001
      containers:
        - name: kafka
          image: bitnami/kafka:3.6.0
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_LISTENERS
              value: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9094
            - name: KAFKA_ADVERTISED_LISTENERS
              value: INTERNAL://kafka.uber-service.svc.cluster.local:9092,EXTERNAL://127.0.0.1:9094
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: INTERNAL
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: zookeeper-headless.uber-service.svc.cluster.local:2181
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
          volumeMounts:
            - name: kafka-data
              mountPath: /bitnami/kafka
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: schema-registry
  namespace: uber-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: schema-registry
  template:
    metadata:
      labels:
        app: schema-registry
    spec:
      containers:
        - name: schema-registry
          image: bitnami/schema-registry:latest
          ports:
            - containerPort: 8081
          env:
            - name: SCHEMA_REGISTRY_KAFKA_BROKERS
              value: PLAINTEXT://kafka.uber-service.svc.cluster.local:9092
            - name: SCHEMA_REGISTRY_HOST_NAME
              value: schema-registry
            - name: SCHEMA_REGISTRY_LISTENERS
              value: http://0.0.0.0:8081
            - name: SCHEMA_REGISTRY_DEBUG
              value: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: schema-registry
  namespace: uber-service
spec:
  type: LoadBalancer
  selector:
    app: schema-registry
  ports:
    - port: 8081
      targetPort: 8081
      protocol: TCP
