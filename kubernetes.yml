# This is a high-level breakdown of what you need for Kubernetes setup
# based on your docker-compose file. This does not include Helm charts directly,
# but notes where to use them. Kubernetes manifests are provided for services not
# managed by Helm.
---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: uber-service
spec:
  selector:
    matchLabels:
      app: postgres
  serviceName: "postgres"
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:17.4
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi

---
# PostgreSQL Headless Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: uber-service
spec:
  clusterIP: None
  ports:
    - port: 5432
  selector:
    app: postgres

---
# PostgreSQL NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: uber-service
spec:
  type: LoadBalancer
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432



---
# Kafka UI Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui
  namespace: uber-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      containers:
        - name: kafka-ui
          image: provectuslabs/kafka-ui:latest
          ports:
            - containerPort: 8080
          env:
            - name: KAFKA_CLUSTERS_0_NAME
              value: local-kafka
            - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
              value: kafka-headless.uber-service.svc.cluster.local:9092
            - name: KAFKA_CLUSTERS_0_SCHEMAREGISTRY
              value: http://schema-registry:8081

---
# Kafka UI Service
apiVersion: v1
kind: Service
metadata:
  name: kafka-ui
  namespace: uber-service
spec:
  selector:
    app: kafka-ui
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: LoadBalancer

---
# Template for one Kafka consumer
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer-ride-requested
  namespace: uber-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer-ride-requested
  template:
    metadata:
      labels:
        app: consumer-ride-requested
    spec:
      containers:
        - name: consumer-ride-requested
          image: uber-consumer:latest
          imagePullPolicy: Never
          command: ["python", "-m", "consumers.modules.consumers.consumer_ride_requested"]
          envFrom:
            - configMapRef:
                name: common-env
            - secretRef:
                name: postgres-secret

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer-ride-started
  namespace: uber-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer-ride-started
  template:
    metadata:
      labels:
        app: consumer-ride-started
    spec:
      containers:
        - name: consumer-ride-started
          image: uber-consumer:latest
          imagePullPolicy: Never
          command: ["python", "-m", "consumers.modules.consumers.consumer_ride_started"]
          envFrom:
            - configMapRef:
                name: common-env
            - secretRef:
                name: postgres-secret

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer-ride-completed
  namespace: uber-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer-ride-completed
  template:
    metadata:
      labels:
        app: consumer-ride-completed
    spec:
      containers:
        - name: consumer-ride-completed
          image: uber-consumer:latest
          imagePullPolicy: Never
          command: [ "python", "-m", "consumers.modules.consumers.consumer_ride_completed" ]
          envFrom:
            - configMapRef:
                name: common-env
            - secretRef:
                name: postgres-secret

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer-location-update
  namespace: uber-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer-location-update
  template:
    metadata:
      labels:
        app: consumer-location-update
    spec:
      containers:
        - name: consumer-location-update
          image: uber-consumer:latest
          imagePullPolicy: Never
          command: ["python", "-m", "consumers.modules.consumers.consumer_location_update"]
          envFrom:
            - configMapRef:
                name: common-env
            - secretRef:
                name: postgres-secret

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer-dlq
  namespace: uber-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer-dlq
  template:
    metadata:
      labels:
        app: consumer-dlq
    spec:
      containers:
        - name: consumer-dlq
          image: uber-consumer:latest
          imagePullPolicy: Never
          command: ["python", "-m", "consumers.modules.consumers.consumer_dlq"]
          envFrom:
            - configMapRef:
                name: common-env
            - secretRef:
                name: postgres-secret

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-producer
  namespace: uber-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-producer
  template:
    metadata:
      labels:
        app: kafka-producer
    spec:
      containers:
        - name: kafka-producer
          image: uber-producer:latest
          imagePullPolicy: Never
          command: ["python3", "producer/producer.py"]
          env:
            - name: KAFKA_BROKER
              value: kafka.uber-service.svc.cluster.local:9092
            - name: SCHEMA_REGISTRY_URL
              value: http://schema-registry.uber-service.svc.cluster.local:8081
            - name: POSTGRES_HOST
              value: postgres.uber-service.svc.cluster.local
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_DB
          resources:
            limits:
              memory: "256Mi"
              cpu: "250m"
          ports:
            - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-producer
  namespace: uber-service
spec:
  selector:
    app: kafka-producer
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  type: ClusterIP

